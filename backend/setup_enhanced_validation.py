#!/usr/bin/env python\n\"\"\"\nSetup script for enhanced duplicate validation system\n\"\"\"\nimport os\nimport sys\nimport django\n\n# Setup Django environment\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'attendance_system.settings')\ndjango.setup()\n\ndef update_urls():\n    \"\"\"Update URL configuration to include enhanced endpoints\"\"\"\n    print(\"🔧 SETTING UP ENHANCED VALIDATION URLS\")\n    print(\"=\" * 50)\n    \n    # Read current students urls.py\n    students_urls_path = \"apps/students/urls.py\"\n    \n    try:\n        with open(students_urls_path, 'r') as f:\n            content = f.read()\n        \n        # Check if enhanced views are already imported\n        if 'enhanced_views' not in content:\n            # Add enhanced views import\n            new_content = content.replace(\n                \"from . import views\",\n                \"from . import views\\nfrom . import enhanced_views\"\n            )\n            \n            # Add enhanced URL patterns\n            enhanced_patterns = \"\"\"\n    \n    # Enhanced duplicate validation endpoints\n    path('enhanced-register/', enhanced_views.enhanced_register_student, name='enhanced_register_student'),\n    path('enhanced-register-face/', enhanced_views.enhanced_register_face, name='enhanced_register_face'),\n    \n    # Duplicate check endpoints\n    path('check-duplicates/', enhanced_views.check_duplicates, name='check_duplicates'),\n    path('check-email-duplicate/', enhanced_views.check_email_duplicate, name='check_email_duplicate'),\n    path('check-phone-duplicate/', enhanced_views.check_phone_duplicate, name='check_phone_duplicate'),\n    path('check-password-duplicate/', enhanced_views.check_password_duplicate, name='check_password_duplicate'),\n    path('check-roll-number-duplicate/', enhanced_views.check_roll_number_duplicate, name='check_roll_number_duplicate'),\n    path('check-face-duplicate/', enhanced_views.check_face_duplicate, name='check_face_duplicate'),\"\"\"\n            \n            # Insert before the closing bracket\n            new_content = new_content.replace(\n                \"    path('classes/', views.get_classes, name='get_classes'),\\n]\",\n                f\"    path('classes/', views.get_classes, name='get_classes'),{enhanced_patterns}\\n]\"\n            )\n            \n            # Write updated content\n            with open(students_urls_path, 'w') as f:\n                f.write(new_content)\n            \n            print(\"   ✅ Enhanced URLs added to students/urls.py\")\n        else:\n            print(\"   ✅ Enhanced URLs already configured\")\n    \n    except Exception as e:\n        print(f\"   ❌ Error updating URLs: {e}\")\n        print(\"   💡 You may need to manually update the URLs\")\n\n\ndef create_migration():\n    \"\"\"Create any necessary database migrations\"\"\"\n    print(\"\\n📊 CHECKING DATABASE MIGRATIONS\")\n    print(\"=\" * 40)\n    \n    try:\n        # Check if migrations are needed\n        from django.core.management import execute_from_command_line\n        \n        print(\"   Checking for pending migrations...\")\n        execute_from_command_line(['manage.py', 'makemigrations'])\n        \n        print(\"   Running migrations...\")\n        execute_from_command_line(['manage.py', 'migrate'])\n        \n        print(\"   ✅ Database migrations completed\")\n    \n    except Exception as e:\n        print(f\"   ⚠️  Migration check: {e}\")\n        print(\"   💡 Run manually: python manage.py makemigrations && python manage.py migrate\")\n\n\ndef test_imports():\n    \"\"\"Test if all enhanced modules can be imported\"\"\"\n    print(\"\\n🧪 TESTING ENHANCED MODULE IMPORTS\")\n    print(\"=\" * 40)\n    \n    try:\n        from apps.authentication.enhanced_serializers import (\n            EnhancedUserRegistrationSerializer,\n            FaceDuplicateValidator,\n            ValidationUtils\n        )\n        print(\"   ✅ Enhanced authentication serializers imported\")\n        \n        from apps.students.enhanced_serializers import (\n            EnhancedStudentRegistrationSerializer,\n            EnhancedFaceRegistrationSerializer,\n            DuplicateCheckSerializer\n        )\n        print(\"   ✅ Enhanced student serializers imported\")\n        \n        from apps.students.enhanced_views import (\n            enhanced_register_student,\n            check_duplicates\n        )\n        print(\"   ✅ Enhanced views imported\")\n        \n        print(\"   ✅ All enhanced modules imported successfully\")\n        \n    except ImportError as e:\n        print(f\"   ❌ Import error: {e}\")\n        return False\n    \n    return True\n\n\ndef create_test_data():\n    \"\"\"Create some test data for validation\"\"\"\n    print(\"\\n📝 CREATING TEST DATA\")\n    print(\"=\" * 30)\n    \n    try:\n        from apps.authentication.models import User\n        from apps.students.models import Student\n        \n        # Check if test user already exists\n        if not User.objects.filter(email='testuser@example.com').exists():\n            user = User.objects.create_user(\n                username='testuser',\n                email='testuser@example.com',\n                password='testpass123',\n                role='student'\n            )\n            \n            student = Student.objects.create(\n                user=user,\n                roll_number='TEST123',\n                phone_number='1234567890',\n                student_class='Test Class'\n            )\n            \n            print(f\"   ✅ Created test user: {user.email}\")\n            print(f\"   ✅ Created test student: {student.roll_number}\")\n        else:\n            print(\"   ✅ Test data already exists\")\n    \n    except Exception as e:\n        print(f\"   ❌ Error creating test data: {e}\")\n\n\ndef show_usage_examples():\n    \"\"\"Show usage examples\"\"\"\n    print(\"\\n📚 USAGE EXAMPLES\")\n    print(\"=\" * 30)\n    \n    print(\"\"\"\n🔗 API Endpoints:\n\n1. Enhanced Registration:\n   POST /api/students/enhanced-register/\n   \n2. Check Email Duplicate:\n   GET /api/students/check-email-duplicate/?email=test@example.com\n   \n3. Check Phone Duplicate:\n   GET /api/students/check-phone-duplicate/?phone_number=1234567890\n   \n4. Check Password Duplicate:\n   POST /api/students/check-password-duplicate/\n   Body: {\"password\": \"mypassword\"}\n   \n5. Check Face Duplicate:\n   POST /api/students/check-face-duplicate/\n   Body: {\"face_image_data\": \"data:image/jpeg;base64,...\"}\n   \n6. Batch Duplicate Check:\n   POST /api/students/check-duplicates/\n   Body: {\"email\": \"...\", \"phone_number\": \"...\", \"password\": \"...\"}\n\n🧪 Testing:\n   python test_duplicate_validation.py\n\n📖 Frontend Integration:\n   See: frontend_integration_guide.md\n\"\"\")\n\n\ndef main():\n    \"\"\"Main setup function\"\"\"\n    print(\"🚀 ENHANCED DUPLICATE VALIDATION SETUP\")\n    print(\"=\" * 60)\n    \n    # Test imports first\n    if not test_imports():\n        print(\"\\n❌ Setup failed due to import errors\")\n        return\n    \n    # Update URLs\n    update_urls()\n    \n    # Create migrations\n    create_migration()\n    \n    # Create test data\n    create_test_data()\n    \n    # Show usage examples\n    show_usage_examples()\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"🎉 ENHANCED DUPLICATE VALIDATION SETUP COMPLETE!\")\n    \n    print(\"\\n📋 WHAT'S NEW:\")\n    print(\"   ✅ Email duplicate checking\")\n    print(\"   ✅ Phone number duplicate checking\")\n    print(\"   ✅ Password duplicate checking\")\n    print(\"   ✅ Face duplicate checking\")\n    print(\"   ✅ Roll number duplicate checking\")\n    print(\"   ✅ Real-time validation APIs\")\n    print(\"   ✅ Enhanced registration endpoint\")\n    \n    print(\"\\n🎯 NEXT STEPS:\")\n    print(\"   1. Start Django server: python manage.py runserver\")\n    print(\"   2. Test the system: python test_duplicate_validation.py\")\n    print(\"   3. Update your frontend using: frontend_integration_guide.md\")\n    print(\"   4. Test with real data\")\n    \n    print(\"\\n⚠️  IMPORTANT:\")\n    print(\"   - Face duplicate checking requires DeepFace to be working\")\n    print(\"   - Password checking may be slow with many users\")\n    print(\"   - Consider caching for production use\")\n\n\nif __name__ == \"__main__\":\n    main()"
  }
]